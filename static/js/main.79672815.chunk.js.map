{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","usedValues","nextNumber","message","renderTable","tdStyle","border","textAlign","tdNextStyle","color","fontWeight","table","i","children","j","currentStyle","element","document","getElementById","style","push","id","key","getUniqueInt","length","max","setState","val","Math","floor","random","find","x","newValue","console","log","className","scope","this","width","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,sIC8G5BC,G,wNAzGbC,MAAQ,CAAEC,WAAY,GAAIC,WAAY,EAAGC,QAAS,I,EAElDC,YAAc,WAKZ,IAJA,IAAMC,EAAU,CAAEC,OAAQ,kBAAmBC,UAAW,UAClDC,EAAc,CAAEF,OAAQ,kBAAmBC,UAAW,SAAUE,MAAM,MAAOC,WAAY,QAE3FC,EAAQ,GACHC,EAAI,EAAGA,EAAI,GAAIA,GAAK,GAAI,CAE/B,IADA,IAAIC,EAAW,GACNC,EAAIF,EAAI,EAAGE,GAAKF,EAAI,GAAIE,IAAK,CACpC,IAAIC,EAAeV,EACfW,EAAUC,SAASC,eAAeJ,GACvB,OAAZE,IAEE,EAAKhB,MAAME,aAAeY,GAA6B,KAAxBE,EAAQG,MAAMV,QAE9CM,EAAeP,IAKnBK,EAASO,KACP,wBAAID,MAAOJ,EAAcM,GAAIP,EAAGQ,IAAKR,GAClCA,IAKPH,EAAMS,KAAK,wBAAIE,IAAKV,GAAIC,IAG1B,OAAOF,G,EAGTY,aAAe,WAEb,GAAI,EAAKvB,MAAMC,WAAWuB,QAAUC,GAClC,EAAKC,SAAS,CAAEvB,QAAS,kBAD3B,CAOA,IAFA,IAAIwB,EAAMC,KAAKC,MANH,GAMSD,KAAKE,UAEX,IAARH,GAAa,EAAK3B,MAAMC,WAAW8B,MAAK,SAAAC,GAAC,OAAIA,IAAML,KAAO,GAC/DA,EAAMC,KAAKC,MATD,GASOD,KAAKE,UAGxB,IAAIG,EAAQ,sBAAO,EAAKjC,MAAMC,YAAlB,CAA8B0B,IAC1CO,QAAQC,IAAI,WAAYF,GACxB,EAAKP,SAAS,CACZzB,WAAYgC,EACZ/B,WAAYyB,M,uDAKd,OACE,yBAAKS,UAAU,aACb,wBAAIA,UAAU,wDAAd,WAGA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,2BAAOA,UAAU,SACf,+BACE,4BACE,wBAAIC,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,OAGJ,+BAAQC,KAAKlC,iBAGjB,yBAAKgC,UAAU,OACb,4BACEA,UAAU,uBACVjB,MAAO,CAAEoB,MAAO,QAChBC,QAASF,KAAKf,cAHhB,eAOA,yBAAKa,UAAU,UACf,6BACE,uBACEA,UAAU,oEACVf,GAAG,UAEmB,KAAvBiB,KAAKtC,MAAMG,QAAiBmC,KAAKtC,MAAME,WAAaoC,KAAKtC,MAAMG,iB,GAhG5DsC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SDwHpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMtD,c","file":"static/js/main.79672815.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = { usedValues: [], nextNumber: 0, message: \"\" };\n\n  renderTable = () => {\n    const tdStyle = { border: \"1px solid black\", textAlign: \"center\" };\n    const tdNextStyle = { border: \"1px solid black\", textAlign: \"center\", color:'red', fontWeight: 'bold'  };\n\n    let table = [];\n    for (let i = 0; i < 90; i += 10) {\n      let children = [];\n      for (let j = i + 1; j <= i + 10; j++) {\n        let currentStyle = tdStyle;\n        var element = document.getElementById(j)\n        if(element !== null)\n        {\n          if(this.state.nextNumber === j || element.style.color !== \"\")\n          {\n            currentStyle = tdNextStyle;\n          }\n\n        }\n    \n        children.push(\n          <td style={currentStyle} id={j} key={j}>\n            {j}\n          </td>\n        );\n      }\n\n      table.push(<tr key={i}>{children}</tr>);\n    }\n\n    return table;\n  };\n\n  getUniqueInt = () => {\n    const max = 91;\n    if (this.state.usedValues.length >= max - 1) {\n      this.setState({ message: \"Game Over\" });\n      return;\n    }\n\n    var val = Math.floor(Math.random() * max);\n    //const found = this.state.usedValues.find(x => x === val);\n    while (val === 0 || this.state.usedValues.find(x => x === val) > 0) {\n      val = Math.floor(Math.random() * max);\n    }\n \n    var newValue = [...this.state.usedValues, val];\n    console.log(\"NewValue\", newValue);\n    this.setState({\n      usedValues: newValue,\n      nextNumber: val,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"d-flex p-2 justify-content-center alert-warning mb-2\">\n          Tambola\n        </h1>\n        <div className=\"row\">\n          <div className=\"col-8\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">#</th>\n                </tr>\n              </thead>\n              <tbody>{this.renderTable()}</tbody>\n            </table>\n          </div>\n          <div className=\"col\">\n            <button\n              className=\"btn btn-primary mb-2\"\n              style={{ width: \"100%\" }}\n              onClick={this.getUniqueInt}\n            >\n              Next Number\n            </button>\n            <div className=\"w-100\"></div>\n            <div>\n              <p\n                className=\"mt-5 font-weight-bold display-1 d-flex p-2 justify-content-center\"\n                id=\"number\"\n              >\n              {this.state.message === \"\" ? this.state.nextNumber : this.state.message}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}